5.2 Object: The Consmic Superclass

5.2.1 The equals Method

//判断两个对象是否"相等"
class Employee{

	public boolean equals(Object otherObject){

		// a quick test to see if the objects are identical
		if (this == otherObject) return true;

		// must return false if the explicit parameter is null
		if (otherObject == null) return false;
	
		// if the classes don't match, they can't be equal
		if (getClass() != otherObject.getClass())
			return false;

		// now we know otherObject is a non-null Employee
		Employee other = (Employee) otherObject;

		// test whether the fields have identical values
		return name.equals(other.name)&& salary == other.salary&& hireDay.equals(other.hireDay);
	}
}





5.2.2 Equality Testing and Inheritance

The Java Language Specification requires that the equals method has the following properties:

1. It is reflexive: For any non-null reference x, x.equals(x) should return true.
2. It is symmetric: For any references x and y, x.equals(y) should return true if and only if y.equals(x) returns true.
3. It is transitive: For any references x, y, and z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true.
4. It is consistent: If the objects to which x and y refer haven’t changed, then repeated calls to x.equals(y) return the same value.
5. For any non-null reference x, x.equals(null) should return false.

java.util.Arrays
	static boolean equals(type[] a, type[] b)

java.util.Objects
	static boolean equals(Object a, Object b)





5.2.3 The hashCode Method

A hash code is an integer that is derived from an object.


String s = "Ok";
StringBuilder sb = new StringBuilder(s);
System.out.println(s.hashCode() + " " + sb.hashCode());
String t = new String("Ok");
StringBuilder tb = new StringBuilder(t);
System.out.println(t.hashCode() + " " + tb.hashCode());
// String重写了hashCode()方法，而StringBuilder没有重写hashCode()方法

java.lang.Object
	int hashCode()
	int hash(Object ... object)
	static int hashCode(Object a)

java.util.Arrays
	static int hashCode(type[] a)





5.2.4 The toString Method

package equals;

/**
* This program demonstrates the equals method.
* @version 1.12 2012-01-26
* @author Cay Horstmann
*/
public class EqualsTest{
 public static void main(String[] args)
 {
 Employee alice1 = new Employee("Alice Adams", 75000, 1987, 12,);
 Employee alice2 = alice1;
 Employee alice3 = new Employee("Alice Adams", 75000, 1987, 12,15);
 Employee bob = new Employee("Bob Brandson", 50000, 1989, 10,1);

 System.out.println("alice1 == alice2: " + (alice1 == alice2));

 System.out.println("alice1 == alice3: " + (alice1 == alice3));

 System.out.println("alice1.equals(alice3): " + alice1.equals(alice3));

 System.out.println("alice1.equals(bob): " + alice1.equals(bob));

 System.out.println("bob.toString(): " + bob);

 Manager carl = new Manager("Carl Cracker", 80000, 1987, 12, 15);
 Manager boss = new Manager("Carl Cracker", 80000, 1987, 12, 15);
 boss.setBonus(5000);
 System.out.println("boss.toString(): " + boss);
 System.out.println("carl.equals(boss): " + carl.equals(boss));
 System.out.println("alice1.hashCode(): " + alice1.hashCode());
 System.out.println("alice3.hashCode(): " + alice3.hashCode());
 System.out.println("bob.hashCode(): " + bob.hashCode());
 System.out.println("carl.hashCode(): " + carl.hashCode());
 }
}




package equals;

import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Objects;

public class Employee
{
 private String name;
 private double salary;
 private Date hireDay;

 public Employee(String n, double s, int year, int month, int day)
 {
 name = n;
 salary = s;
 GregorianCalendar calendar = new GregorianCalendar(year, month- 1, day);
 hireDay = calendar.getTime();
 }

 public String getName()
 {
 return name;
 }

 public double getSalary()
 {
 return salary;
 }

 public Date getHireDay()
 {
 return hireDay;
 }

 public void raiseSalary(double byPercent)
 {
 double raise = salary * byPercent / 100;
 salary += raise;
 }

 public boolean equals(Object otherObject)
 {
 // a quick test to see if the objects are identical
 if (this == otherObject) return true;

 // must return false if the explicit parameter is null
 if (otherObject == null) return false;
 // if the classes don't match, they can't be equal
 if (getClass() != otherObject.getClass()) return false;

 // now we know otherObject is a non-null Employee
 Employee other = (Employee) otherObject;

 // test whether the fields have identical values
 return Objects.equals(name, other.name) && salary == other.salary && Objects.equals(hireDay, othe
 }

 public int hashCode()
 {
 return Objects.hash(name, salary, hireDay);
 }

 public String toString()
 {
 return getClass().getName() + "[name=" + name + ",salary=" + salary + ",hireDay=" + hireDay
 + "]";
 }
 }





package equals;

public class Manager extends Employee
{
private double bonus;

public Manager(String n, double s, int year, int month, int day)
{
super(n, s, year, month, day);
 bonus = 0;
 }

 public double getSalary()
 {
 double baseSalary = super.getSalary();
 return baseSalary + bonus;
 }

 public void setBonus(double b)
 {
 bonus = b;
 }
 public boolean equals(Object otherObject)
 {
 if (!super.equals(otherObject)) return false;
 Manager other = (Manager) otherObject;
 // super.equals checked that this and other belong to the same class
 return bonus == other.bonus;
 }

 public int hashCode()
 {
 return super.hashCode() + 17 * new Double(bonus).hashCode();
 }

 public String toString()
 {
 return super.toString() + "[bonus=" + bonus + "]";
 }
}




java.lang.Object 
	Class getClass()
	boolean equals(Object otherObject)
	String toString()

java.lang.Class
	String getName()
	Class getSuperclass()


