4.3 Defining Your Own Classes

4.3.1 An Employee Class

class ClassName{
	
	field1
	field2
	......

	constructor1
	constructor2
	......

	method1
	method2
	......
}

class Employee{

	private String name;
	private double salary;
	private Date hireDay;

	public Employee(String n, double s, int year, int month, int day){

		this.name = n;
		this.salary = s;
		GregorianCalendar calendar = new GregorianCalendar(year, month-1, day);
		hireDay = calendar.getTime();
	}

	public String getName(){

		return this.name;
	}
}





4.3.2 Use of Multiple Source Files

javac Employee*.java






4.3.3 Dissecting the Employee Class   (dissect:解剖，剖开，仔细分析)

private String name;

public String getName(){}





4.3.4 First Steps with Constructors

keep the following in mind:
· A constructor has the same name as the class
· A class can have more than one constructor
· A constructor can take zero, one, or more parameters 
· A constructor has no return value
· A constructor is always classed with the new operator





4.3.5 Implicit and Explicit Parameters

Explicit parameter  显式参数-byPercent
public void raiseSalary(double byPercent){
	double raise = salary * byPercent / 100;
	salary += raise;
}

Implicit parameter  隐式参数-this
public void raiseSalary(double byPercent){
	double raise = this.salary * byPercent / 100;
	this.salary += raise;
}





4.3.6 Benefits of Encapsulation

Sometimes, it happens that you want to get and set the value of an instance field.
Then you need to supply three items:
·A private data field
·A public field accessor method
·A public field mutator method





4.3.7 Class-Based Access Privileges

class Employee{

	...
	public boolean equals(Employee other){
		return name.equals(other.name);
	}
}

A typical class is 
	if (harry.equals(boos))	...
This method accesses the private fields of harry, which is not surprising.
It also accesses the private fields of boss.
This is legal because boss is an object of type Employee, and a method of the Employee class is permitted
to access the private fields of any object of type Employee.





4.3.8 Private Methods  --删除后影响小;修改实现时没有义务保证它可用

Sometimes, you may wish to break up the code for a computation into separate helper methods.
Typically, these helper methods should not be part of the public interface
they may be too close to the current implementation or require a special protocol or calling order.
such methods are best implemented as private.





4.3.9 Final Instance Fields

class Employee{

	private final String name;
	......
}

You must guarantee that the field value has been set after the end of every constructor.
